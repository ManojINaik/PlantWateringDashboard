You are an expert developer, data analyst, and systems integrator. I need you to create an admin dashboard that displays real-time data from a MySQL database using Python (Flask) for the back-end and AJAX for dynamic updates on the front-end. The dashboard must update at a fixed interval of 30 seconds. The dashboard should include a table with five columns: ID, schedule time, duration, yesterday flow, and today flow. The “yesterday flow” and “today flow” values must be one of: pending, completed, or no data.

System Overview and Data Context:
The system is an automated plant watering setup controlled by UNO devices (e.g., Arduino UNOs). These devices generate logs that are stored in CSV files with two primary entry types:

getconfigrun: Indicates a successful configuration retrieval (value: "success").
speedreading: Contains sensor and event data with a Unix timestamp and various readings. For example:
W0/W1: Indicates watering stop (W0) or start (W1) along with numerical details (e.g., water count, flow rate, duration).
BV: Represents battery voltage in millivolts (e.g., BV:3300 means 3.3V).
E1/E2: Represent error codes with accompanying numeric values.
TD: Denotes time difference data.
Multiple readings in a single entry may be separated by a tilde (~).
Schedule details are stored in a separate CSV file (data_Schedule.csv) that includes fields like idSchedule, startdate, duration, time, schedule change count, an on/off flag, and weather conditions.

Cases to Handle Based on Log Data:

Case 1 – Normal Watering: After a getconfigrun success, the speedreading includes both a BV reading and watering status (W0 or W1) with numerical details.
Case 2 – Direct Speedreading without getconfigrun: The log entry contains only a BV reading with no watering indicator.
Case 3 – Error without Watering: The entry shows BV and error codes (E1/E2) but does not include any watering status.
Case 4 – Normal Watering with Error: The entry includes BV, watering status (W0/W1), and error codes.
Case 5 – Direct Speedreading with BV Only: An inferred case where only a BV reading is present, with no configuration or watering data.
Mapping Log Data to Dashboard Flows (Example):

Yesterday Flow / Today Flow:
Completed: If a log entry for the respective day (yesterday or today) shows a getconfigrun success paired with a watering event (W0 or W1) within the scheduled period, mark the flow as "completed".
Pending: If there is a getconfigrun success but no watering event (W0/W1) is recorded during the scheduled period, mark the flow as "pending".
No Data: If there is no log entry at all for the scheduled period, mark the flow as "no data".
Note: In cases with errors (E1/E2), include logging or alert messages but still determine the flow based on whether the watering event was executed.
Implementation Requirements:

Back-end:
Write complete, working Python (Flask) code that connects to a MySQL database, queries the necessary data, and exposes an API endpoint to provide the dashboard data in JSON format.
Implement detailed parsing of the CSV log data to handle each of the five cases described above.
Include logging and error handling (e.g., writing errors and exceptional events to a log file) to aid in debugging and monitoring.
Front-end:
Develop shadcn/ui code that uses AJAX to call the API endpoint every 30 seconds and update the dashboard table in real time.
The table should display five columns: ID, schedule time, duration, yesterday flow, and today flow. For example, one table row might display: [610, "2025-01-01 00:33:27", "30 min", "completed", "pending"].
Code Documentation:
Include detailed comments in the code to explain how CSV log data is parsed and how each of the five cases is handled.
Explain the logic mapping raw log data to the “yesterday flow” and “today flow” values.
Additional:
The admin dashboard interface is open (no user authentication required).
Summary of My Communication Style:
I have provided extensive technical details, CSV log examples, and a thorough breakdown of each field (e.g., W0/W1, BV, E1/E2, TD) along with various cases. My communication is analytical and detailed, and I expect a comprehensive solution that covers both system analysis and practical code implementation.

only utilize miscellaneousand schedule tables